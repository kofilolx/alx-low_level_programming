!<arch>
0-isupper.c/    0           0     0     644     264       `
#include "main.h"
#include <stdio.h>

/**
 * _isupper - Check if paramter c represents an uppercase letter.
 * @c: Int representing a character
 * Return: Always 0.
 */
int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
0-memset.c/     0           0     0     644     277       `
#include "main.h"

/**
 * _memset - memory set
 * @s: pointer to a char argument
 * @b: information to be changed
 * @n: array index
 * Return: *s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}

0-putchar.c/    0           0     0     644     333       `
#include "main.h"

/**
 * main - A program that prints _putchar
 *
 * Description: _putchar as output only
 *
 * Return: Always 0 (Sucess)
 */

int main(void)
{
	/* Array declaration */
	char arr[] = "_putchar";
	int i = 0;

	/* For loop to read array */
	for (; i < 8; i++)
	{
		_putchar(arr[i]);
	}
	_putchar('\n');
	return (0);
}

0-strcat.c/     0           0     0     644     345       `
#include "main.h"

/**
 * _strcat - function that concatenates two strings.
 * @src: data source
 * @dest: data destination
 * Return: dest.
 */

char *_strcat(char *dest, char *src)
{
	int i, j;

	for (i = 0; dest[i] != '\0'; i++)
		;

	j = 0;
	while (src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (dest);
}


1-isdigit.c/    0           0     0     644     234       `
#include "main.h"

/**
 * _isdigit - Checks if paramter c represents a digit.
 * @c: Int representing a character
 * Return: Always 0.
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
1-memcpy.c/     0           0     0     644     316       `
#include "main.h"

/**
 * _memcpy - memory copy
 * @dest: destination pointer char argument
 * @src: source pointer char argument
 * @n: number of char
 * Return: *dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     425       `
#include "main.h"
#include <string.h>

/**
 * _strncat -  function that concatenates two strings.
 * @src: source character string
 * @dest: destination character string
 * @n: number of src character to be copied
 * Return: dest.
 */

char *_strncat(char *dest, char *src, int n)
{
	int i = strlen(dest);
	int j = 0;

	while (j < n && *src)
	{
		dest[i + j] = *src;
		src++;
		j++;
	}
	dest[i + j] = '\0';
	return (dest);
}

2-strchr.c/     0           0     0     644     263       `
#include "main.h"

/**
 * _strchr - prints found c
 * @s: pointer to a char
 * @c: char to find
 * Return: *s
 */

char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
		{
			return (s);
		}
		s++;
	}
	if (*s == c)
		return (s);

	return (0);
}

2-strlen.c/     0           0     0     644     262       `
#include "main.h"
/**
 * _strlen - calculate the length of a string.
 *
 * @s: the string to calculate it's length.
 * Return: length of a string.
 */

int _strlen(char *s)
{
	int i;
	int len = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		len++;
	}
	return (len);
}
2-strncpy.c/    0           0     0     644     401       `
#include "main.h"

/**
 * _strncpy - a function that copies  two strings.
 * @src: source character string
 * @dest: destination character string
 * @n: number of src character to be copied
 * Return: dest.
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}

	for (; i < n; i++)
	{
		dest[i] = '\0';
	}

	return (dest);
}

3-islower.c/    0           0     0     644     434       `
#include "main.h"

/**
 * _islower - Checks if a character is a lowercase letter
 *
 * Description: This function checks whether the given character 'c'
 * is a lowercase letter. It returns 1 if the character is lowercase,
 * and 0 otherwise.
 *
 * @c: The character to be checked
 *
 * Return: 1 if the character is lowercase, 0 otherwise
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
{
		return (1);
	}
	else
		return (0);
}
3-strcmp.c/     0           0     0     644     328       `
#include "main.h"

/**
 * _strcmp -  function that compares two strings.
 * @s1: source character string
 * @s2: source character string
 * Return: result.
 */

int _strcmp(char *s1, char *s2)
{
	int result = 0;

	while (*s1 == *s2 && *s1 != '\0')
	{
		s1++;
		s2++;
	}
	if (s1 != s2)
		result = *s1 - *s2;

	return (result);
}
3-strspn.c/     0           0     0     644     465       `
/**
 * _strspn - return the length of prefix substring
 * @s: Character string to calculate substring from
 * @accept: accepted substring character to match
 * Return: length of bytes
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int count = 0, check = 0, i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
			{
				count++;
				check = 1;
			}
		}
		if (!check)
			return (count);
		check = 0;
		s++;
	}
	return (count);
}

4-isalpha.c/    0           0     0     644     412       `
#include "main.h"

/**
 * _isalpha - Checks if a character is a lowercase letter
 *
 * Description: This function checks whether the given character 'c'
 * is a lowercase or uppercaes letter.
 *
 * @c: The character to be checked
 *
 * Return: 1 if the character is lowercase, 0 otherwise
 */
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	{
		return (1);
	}
	else
		return (0);
}
4-strpbrk.c/    0           0     0     644     334       `
#include <stdio.h>
#include "main.h"


/**
 * _strpbrk - return bytes
 * @s: character string pointer
 * @accept: character string pointer
 * Return: NULL
 */

char *_strpbrk(char *s, char *accept)
{
	int i = 0;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
				return (s);
		}
		s++;
	}
	return (NULL);
}
5-strstr.c/     0           0     0     644     369       `
#include <stdlib.h>
#include "main.h"

/**
* _strstr - Search function
* @haystack: points a char
* @needle: points a char
* Return: 0
*/

char *_strstr(char *haystack, char *needle)
{
	int i;

	while (*haystack)
	{
		for (i = 0; needle[i] && haystack[i] && needle[i] == haystack[i]; i++)
			;
		if (!needle[i])
			return (haystack);
		haystack++;
	}
	return (NULL);
}

6-abs.c/        0           0     0     644     210       `
#include "main.h"

/**
 * _abs - returns absolute value of an int
 * @n: integer from which to get an absolute value
 * Return: Void.
 */

int _abs(int n)
{

	if (n < 0)
	{
		return (n * -1);
	}
	return (n);
}
9-strcpy.c/     0           0     0     644     0         `
100-atoi.c/     0           0     0     644     518       `
#include "main.h"

/**
 * _atoi - convert a string into an integer.
 *
 * @s: chraacter string
 * Description: Number in the string can be preceded by an infinite
 * number of characters.
 *
 * Return: integer.
 */

int _atoi(char *s)
{
	int sign = 1, i = 0;
	unsigned int res = 0;

	while (!(s[i] <= '9' && s[i] >= '0') && s[i] != '\0')
	{
		if (s[i] == '-')
			sign *= -1;
		i++;
	}
	while (s[i] <= '9' && (s[i] >= '0' && s[i] != '\0'))
	{
		res = (res * 10) + (s[i] - '0');
		i++;
	}
	res *= sign;
	return (res);
}
_putchar.c/     0           0     0     644     0         `
